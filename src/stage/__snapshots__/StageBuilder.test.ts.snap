// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`stageBuilder create named: names stage 1`] = `
Stage {
  "_config": {
    "name": "names stage",
  },
  "run": undefined,
  [Symbol(stage)]: true,
}
`;

exports[`stageBuilder create with function: function stage 1`] = `
Stage {
  "_config": {
    "input": ZodObject {
      "_cached": null,
      "_def": {
        "catchall": ZodNever {
          "_def": {
            "typeName": "ZodNever",
          },
          "and": [Function: and],
          "array": [Function: array],
          "brand": [Function: brand],
          "catch": [Function: catch],
          "default": [Function: default],
          "describe": [Function: describe],
          "isNullable": [Function: isNullable],
          "isOptional": [Function: isOptional],
          "nullable": [Function: nullable],
          "nullish": [Function: nullish],
          "optional": [Function: optional],
          "or": [Function: or],
          "parse": [Function: parse],
          "parseAsync": [Function: AsyncFunction],
          "pipe": [Function: pipe],
          "promise": [Function: promise],
          "readonly": [Function: readonly],
          "refine": [Function: refine],
          "refinement": [Function: refinement],
          "safeParse": [Function: safeParse],
          "safeParseAsync": [Function: AsyncFunction],
          "spa": [Function: AsyncFunction],
          "superRefine": [Function: superRefine],
          "transform": [Function: transform],
        },
        "shape": [Function],
        "typeName": "ZodObject",
        "unknownKeys": "strip",
      },
      "and": [Function: and],
      "array": [Function: array],
      "augment": [Function: extend],
      "brand": [Function: brand],
      "catch": [Function: catch],
      "default": [Function: default],
      "describe": [Function: describe],
      "isNullable": [Function: isNullable],
      "isOptional": [Function: isOptional],
      "nonstrict": [Function: passthrough],
      "nullable": [Function: nullable],
      "nullish": [Function: nullish],
      "optional": [Function: optional],
      "or": [Function: or],
      "parse": [Function: parse],
      "parseAsync": [Function: AsyncFunction],
      "pipe": [Function: pipe],
      "promise": [Function: promise],
      "readonly": [Function: readonly],
      "refine": [Function: refine],
      "refinement": [Function: refinement],
      "safeParse": [Function: safeParse],
      "safeParseAsync": [Function: AsyncFunction],
      "spa": [Function: AsyncFunction],
      "superRefine": [Function: superRefine],
      "transform": [Function: transform],
    },
    "name": 
"function() {
      this.name = "run this Stage";
    }"
,
    "run": [Function],
  },
  "run": undefined,
  [Symbol(stage)]: true,
}
`;

exports[`stageBuilder create with Lambda 3: lambda stage 1`] = `
Stage {
  "_config": {
    "input": ZodObject {
      "_cached": null,
      "_def": {
        "catchall": ZodNever {
          "_def": {
            "typeName": "ZodNever",
          },
          "and": [Function: and],
          "array": [Function: array],
          "brand": [Function: brand],
          "catch": [Function: catch],
          "default": [Function: default],
          "describe": [Function: describe],
          "isNullable": [Function: isNullable],
          "isOptional": [Function: isOptional],
          "nullable": [Function: nullable],
          "nullish": [Function: nullish],
          "optional": [Function: optional],
          "or": [Function: or],
          "parse": [Function: parse],
          "parseAsync": [Function: AsyncFunction],
          "pipe": [Function: pipe],
          "promise": [Function: promise],
          "readonly": [Function: readonly],
          "refine": [Function: refine],
          "refinement": [Function: refinement],
          "safeParse": [Function: safeParse],
          "safeParseAsync": [Function: AsyncFunction],
          "spa": [Function: AsyncFunction],
          "superRefine": [Function: superRefine],
          "transform": [Function: transform],
        },
        "shape": [Function],
        "typeName": "ZodObject",
        "unknownKeys": "strip",
      },
      "and": [Function: and],
      "array": [Function: array],
      "augment": [Function: extend],
      "brand": [Function: brand],
      "catch": [Function: catch],
      "default": [Function: default],
      "describe": [Function: describe],
      "isNullable": [Function: isNullable],
      "isOptional": [Function: isOptional],
      "nonstrict": [Function: passthrough],
      "nullable": [Function: nullable],
      "nullish": [Function: nullish],
      "optional": [Function: optional],
      "or": [Function: or],
      "parse": [Function: parse],
      "parseAsync": [Function: AsyncFunction],
      "pipe": [Function: pipe],
      "promise": [Function: promise],
      "readonly": [Function: readonly],
      "refine": [Function: refine],
      "refinement": [Function: refinement],
      "safeParse": [Function: safeParse],
      "safeParseAsync": [Function: AsyncFunction],
      "spa": [Function: AsyncFunction],
      "superRefine": [Function: superRefine],
      "transform": [Function: transform],
    },
    "name": 
"(err, ctx, done) => {
      if (!err && ctx && done)
        ctx.name = "run the stage", done(void 0, ctx);
      else if (done)
        done(err);
    }"
,
    "output": ZodObject {
      "_cached": null,
      "_def": {
        "catchall": ZodNever {
          "_def": {
            "typeName": "ZodNever",
          },
          "and": [Function: and],
          "array": [Function: array],
          "brand": [Function: brand],
          "catch": [Function: catch],
          "default": [Function: default],
          "describe": [Function: describe],
          "isNullable": [Function: isNullable],
          "isOptional": [Function: isOptional],
          "nullable": [Function: nullable],
          "nullish": [Function: nullish],
          "optional": [Function: optional],
          "or": [Function: or],
          "parse": [Function: parse],
          "parseAsync": [Function: AsyncFunction],
          "pipe": [Function: pipe],
          "promise": [Function: promise],
          "readonly": [Function: readonly],
          "refine": [Function: refine],
          "refinement": [Function: refinement],
          "safeParse": [Function: safeParse],
          "safeParseAsync": [Function: AsyncFunction],
          "spa": [Function: AsyncFunction],
          "superRefine": [Function: superRefine],
          "transform": [Function: transform],
        },
        "shape": [Function],
        "typeName": "ZodObject",
        "unknownKeys": "strip",
      },
      "and": [Function: and],
      "array": [Function: array],
      "augment": [Function: extend],
      "brand": [Function: brand],
      "catch": [Function: catch],
      "default": [Function: default],
      "describe": [Function: describe],
      "isNullable": [Function: isNullable],
      "isOptional": [Function: isOptional],
      "nonstrict": [Function: passthrough],
      "nullable": [Function: nullable],
      "nullish": [Function: nullish],
      "optional": [Function: optional],
      "or": [Function: or],
      "parse": [Function: parse],
      "parseAsync": [Function: AsyncFunction],
      "pipe": [Function: pipe],
      "promise": [Function: promise],
      "readonly": [Function: readonly],
      "refine": [Function: refine],
      "refinement": [Function: refinement],
      "safeParse": [Function: safeParse],
      "safeParseAsync": [Function: AsyncFunction],
      "spa": [Function: AsyncFunction],
      "superRefine": [Function: superRefine],
      "transform": [Function: transform],
    },
    "run": [Function],
  },
  "run": undefined,
  [Symbol(stage)]: true,
}
`;

exports[`stageBuilder validate using schema 1`] = `[ComplexError]`;

exports[`stageBuilder initialize other stuff sucessfully: schema stage 1 1`] = `
Stage {
  "_config": {
    "name": "stage",
    "run": [Function],
  },
  "run": undefined,
  [Symbol(stage)]: true,
}
`;

exports[`stageBuilder create with Lambda 2: lambda stage 1`] = `
{
  "_def": {
    "cfg": {
      "input": ZodObject {
        "_cached": null,
        "_def": {
          "catchall": ZodNever {
            "_def": {
              "typeName": "ZodNever",
            },
            "and": [Function: and],
            "array": [Function: array],
            "brand": [Function: brand],
            "catch": [Function: catch],
            "default": [Function: default],
            "describe": [Function: describe],
            "isNullable": [Function: isNullable],
            "isOptional": [Function: isOptional],
            "nullable": [Function: nullable],
            "nullish": [Function: nullish],
            "optional": [Function: optional],
            "or": [Function: or],
            "parse": [Function: parse],
            "parseAsync": [Function: AsyncFunction],
            "pipe": [Function: pipe],
            "promise": [Function: promise],
            "readonly": [Function: readonly],
            "refine": [Function: refine],
            "refinement": [Function: refinement],
            "safeParse": [Function: safeParse],
            "safeParseAsync": [Function: AsyncFunction],
            "spa": [Function: AsyncFunction],
            "superRefine": [Function: superRefine],
            "transform": [Function: transform],
          },
          "shape": [Function],
          "typeName": "ZodObject",
          "unknownKeys": "strip",
        },
        "and": [Function: and],
        "array": [Function: array],
        "augment": [Function: extend],
        "brand": [Function: brand],
        "catch": [Function: catch],
        "default": [Function: default],
        "describe": [Function: describe],
        "isNullable": [Function: isNullable],
        "isOptional": [Function: isOptional],
        "nonstrict": [Function: passthrough],
        "nullable": [Function: nullable],
        "nullish": [Function: nullish],
        "optional": [Function: optional],
        "or": [Function: or],
        "parse": [Function: parse],
        "parseAsync": [Function: AsyncFunction],
        "pipe": [Function: pipe],
        "promise": [Function: promise],
        "readonly": [Function: readonly],
        "refine": [Function: refine],
        "refinement": [Function: refinement],
        "safeParse": [Function: safeParse],
        "safeParseAsync": [Function: AsyncFunction],
        "spa": [Function: AsyncFunction],
        "superRefine": [Function: superRefine],
        "transform": [Function: transform],
      },
      "run": [Function],
    },
    "inputs": ZodObject {
      "_cached": null,
      "_def": {
        "catchall": ZodNever {
          "_def": {
            "typeName": "ZodNever",
          },
          "and": [Function: and],
          "array": [Function: array],
          "brand": [Function: brand],
          "catch": [Function: catch],
          "default": [Function: default],
          "describe": [Function: describe],
          "isNullable": [Function: isNullable],
          "isOptional": [Function: isOptional],
          "nullable": [Function: nullable],
          "nullish": [Function: nullish],
          "optional": [Function: optional],
          "or": [Function: or],
          "parse": [Function: parse],
          "parseAsync": [Function: AsyncFunction],
          "pipe": [Function: pipe],
          "promise": [Function: promise],
          "readonly": [Function: readonly],
          "refine": [Function: refine],
          "refinement": [Function: refinement],
          "safeParse": [Function: safeParse],
          "safeParseAsync": [Function: AsyncFunction],
          "spa": [Function: AsyncFunction],
          "superRefine": [Function: superRefine],
          "transform": [Function: transform],
        },
        "shape": [Function],
        "typeName": "ZodObject",
        "unknownKeys": "strip",
      },
      "and": [Function: and],
      "array": [Function: array],
      "augment": [Function: extend],
      "brand": [Function: brand],
      "catch": [Function: catch],
      "default": [Function: default],
      "describe": [Function: describe],
      "isNullable": [Function: isNullable],
      "isOptional": [Function: isOptional],
      "nonstrict": [Function: passthrough],
      "nullable": [Function: nullable],
      "nullish": [Function: nullish],
      "optional": [Function: optional],
      "or": [Function: or],
      "parse": [Function: parse],
      "parseAsync": [Function: AsyncFunction],
      "pipe": [Function: pipe],
      "promise": [Function: promise],
      "readonly": [Function: readonly],
      "refine": [Function: refine],
      "refinement": [Function: refinement],
      "safeParse": [Function: safeParse],
      "safeParseAsync": [Function: AsyncFunction],
      "spa": [Function: AsyncFunction],
      "superRefine": [Function: superRefine],
      "transform": [Function: transform],
    },
  },
  "build": [Function: build],
  "compile": [Function: compile],
  "config": [Function: config],
  "input": [Function: input],
  "name": [Function: name],
  "output": [Function: output],
  "rescue": [Function: rescue],
  "run": [Function: run],
}
`;

exports[`stageBuilder create with Config: config stage 1`] = `
{
  "_def": {
    "cfg": {
      "run": [Function],
    },
  },
  "build": [Function: build],
  "compile": [Function: compile],
  "config": [Function: config],
  "input": [Function: input],
  "name": [Function: name],
  "output": [Function: output],
  "rescue": [Function: rescue],
  "run": [Function: run],
}
`;
