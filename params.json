{"name":"Pipeline.js","tagline":"pipeline.js declarative pipeilne library","body":"# pipeline.js\r\npipeline.js is declarative pipeline-like framework for node.js\r\n\r\n# Main concept\r\n\r\nSuppose we have *pipeline* with different types of *stages*.\r\n*Stage* is the single working unit that can process some specific component's part. In the pipeline the component's part is passing by specific stages. Every stage can process specific component's part. One specific part can be splited into different parts and? according to its specific requirments, they can be processed as well. After that these different parts is combined back into one component's part with (maybe) different rules.\r\n\r\nUsing the different pipeline's stages one can combine new type of pipeline by assembling they together differently to get another result, or just replace old stages with new, and so on.\r\n\r\nThe same idea is under the development of pipeline.js.\r\nThere is basic stages that can be used to define more complex async-processing of specific data with pipline-like processing.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}