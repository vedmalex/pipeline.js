digraph sample {
	rankdir=LR
// object instance
	node [shape=Mrecord, fillcolor=beige, style=filled];
	"instance of: MultiWaySwitch" [label="<__proto__> instance of: MultiWaySwitch|<name> name : \"Link Embedded Relations\"|<domain> domain : Null|<_events> _events : instance of: Object|<_maxListeners> _maxListeners : Undefined|<cases> cases : \[
\{\"stage\":\{\"name\":\"link opposite embedded\"\}\},
\{\"stage\":\{\"name\":\"link embedded\"\}\}
\]|" ];

// references
// в принципе по интересу можно сделать.... позже
//instance links
	"instance of: MultiWaySwitch":__proto__ -> "MultiWaySwitch":__proto__
// object instance
	node [shape=Mrecord, fillcolor=beige, style=filled];
	"instance of: Stage" [label="<__proto__> instance of: Stage|<run> run : Function|<name> name : \"link not embedded\"|<domain> domain : Null|<_events> _events : instance of: Object|<_maxListeners> _maxListeners : Undefined|" ];

// references
// в принципе по интересу можно сделать.... позже
//instance links
	"instance of: Stage":__proto__ -> "Stage":__proto__
// object instance
	node [shape=Mrecord, fillcolor=beige, style=filled];
	"instance of: Context" [label="<__proto__> instance of: Context|<one> one : 1|<two> two : \"2\"|<three> three : \[
\"one\",
2,
3
\]|<nr> nr : \"/some/\"|<__trace> __trace : Undefined|" ];

// references
// в принципе по интересу можно сделать.... позже
//instance links
	"instance of: Context":__proto__ -> "Context":__proto__
// type
	node [shape = record, fillcolor=orange, style=filled];
	"MultiWaySwitch" [label="<__proto__> MultiWaySwitch|<constructor> constructor : Function|<cases> cases : Undefined|<split> split : Undefined|<combine> combine : Undefined|<reportName> reportName : Undefined|<compile> compile : Undefined|<execute> execute : Undefined|" ];

// references
// в принципе по интересу можно сделать.... позже
//instance links
	"MultiWaySwitch":__proto__ -> "Stage":__proto__
// type
	node [shape = record, fillcolor=orange, style=filled];
	"Undefined" [label="<__proto__> Undefined|" ];

// references
// в принципе по интересу можно сделать.... позже
//instance links
	"Undefined":__proto__ 
// type
	node [shape = record, fillcolor=orange, style=filled];
	"Stage" [label="<__proto__> Stage|<constructor> constructor : Function|<reportName> reportName : Undefined|<ensure> ensure : Undefined|<name> name : \"Stage\"|<validate> validate : Undefined|<rescue> rescue : Undefined|<sign> sign : Undefined|<run> run : Undefined|<execute> execute : Undefined|" ];

// references
// в принципе по интересу можно сделать.... позже
//instance links
	"Stage":__proto__ -> "EventEmitter":__proto__
// type
	node [shape = record, fillcolor=orange, style=filled];
	"Context" [label="<__proto__> Context|<constructor> constructor : Function|<overwrite> overwrite : Undefined|<__parent> __parent : Undefined|<__children> __children : Undefined|<__errors> __errors : Undefined|<__stack> __stack : Undefined|<__trace> __trace : Undefined|<__signWith> __signWith : Undefined|<__setCurrentStackName> __setCurrentStackName : Undefined|<addToStack> addToStack : Undefined|<getChilds> getChilds : Undefined|<getParent> getParent : Undefined|<hasChild> hasChild : Undefined|<ensureIsChild> ensureIsChild : Undefined|<addChild> addChild : Undefined|<fork> fork : Undefined|<get> get : Undefined|<toObject> toObject : Undefined|<toJSON> toJSON : Undefined|" ];

// references
// в принципе по интересу можно сделать.... позже
//instance links
	"Context":__proto__ 

}